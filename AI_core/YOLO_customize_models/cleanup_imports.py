#!/usr/bin/env python3
"""
Script ƒë·ªÉ c·∫≠p nh·∫≠t c√°c import kh√¥ng c·∫ßn thi·∫øt sau khi d·ªçn d·∫πp
Lo·∫°i b·ªè c√°c import cho segmentation, pose, obb, classification, etc.
"""

import os
import re
from pathlib import Path

def update_imports_in_file(file_path):
    """C·∫≠p nh·∫≠t imports trong m·ªôt file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # Lo·∫°i b·ªè c√°c import kh√¥ng c·∫ßn thi·∫øt cho YOLOv8n detection
        imports_to_remove = [
            # Segmentation
            'Segment', 'YOLOESegment', 'v8SegmentationLoss', 'SegmentationModel',
            # Pose
            'Pose', 'v8PoseLoss', 'PoseModel', 
            # OBB
            'OBB', 'v8OBBLoss', 'OBBModel',
            # Classification  
            'Classify', 'v8ClassificationLoss', 'ClassificationModel',
            # World/CLIP
            'WorldDetect', 'WorldModel', 'ImagePoolingAttn', 'C2fAttn',
            # YOLOE
            'YOLOEDetect', 'YOLOEModel', 'YOLOESegModel',
            # RTDETR
            'RTDETRDecoder', 'RTDETRDetectionModel',
            # v10
            'v10Detect',
            # Other modules not needed for YOLOv8n
            'AIFI', 'C2PSA', 'C2fPSA', 'C2fCIB', 'C2fAttn', 'C3TR', 'C3Ghost',
            'C3x', 'RepC3', 'RepNCSPELAN4', 'ELAN1', 'ADown', 'AConv', 'SPPELAN',
            'CBFuse', 'CBLinear', 'A2C2f', 'SCDown', 'TorchVision', 'Index',
            'LRPCHead', 'ResNetLayer', 'RepVGGDW', 'GhostBottleneck', 'GhostConv',
            'HGBlock', 'HGStem', 'Focus', 'BottleneckCSP', 'C1', 'C2', 'C3',
            'C3k2', 'DWConvTranspose2d', 'ConvTranspose', 'Conv2',
            # Loss functions
            'E2EDetectLoss'
        ]
        
        # C·∫≠p nh·∫≠t imports trong ultralytics/nn/tasks.py
        if 'ultralytics/nn/tasks.py' in str(file_path):
            # Lo·∫°i b·ªè c√°c import kh√¥ng c·∫ßn thi·∫øt
            for import_name in imports_to_remove:
                # Lo·∫°i b·ªè t·ª´ import list
                content = re.sub(rf',\s*{import_name}', '', content)
                content = re.sub(rf'{import_name}\s*,', '', content)
                content = re.sub(rf'from.*import.*{import_name}.*\n', '', content)
            
            # Lo·∫°i b·ªè c√°c class kh√¥ng c·∫ßn thi·∫øt
            classes_to_remove = [
                'SegmentationModel', 'PoseModel', 'OBBModel', 'ClassificationModel',
                'RTDETRDetectionModel', 'WorldModel', 'YOLOEModel', 'YOLOESegModel'
            ]
            
            for class_name in classes_to_remove:
                # T√¨m v√† lo·∫°i b·ªè class definition
                pattern = rf'class {class_name}\(.*?\):.*?(?=class|\Z)'
                content = re.sub(pattern, '', content, flags=re.DOTALL)
        
        # C·∫≠p nh·∫≠t imports trong ultralytics/nn/modules/__init__.py
        if 'ultralytics/nn/modules/__init__.py' in str(file_path):
            for import_name in imports_to_remove:
                content = re.sub(rf',\s*{import_name}', '', content)
                content = re.sub(rf'{import_name}\s*,', '', content)
        
        # C·∫≠p nh·∫≠t imports trong ultralytics/cfg/__init__.py
        if 'ultralytics/cfg/__init__.py' in str(file_path):
            # Lo·∫°i b·ªè c√°c task kh√¥ng c·∫ßn thi·∫øt
            content = re.sub(r'"segment"', '', content)
            content = re.sub(r'"classify"', '', content) 
            content = re.sub(r'"pose"', '', content)
            content = re.sub(r'"obb"', '', content)
            content = re.sub(r',\s*,', ',', content)  # Lo·∫°i b·ªè d·∫•u ph·∫©y th·ª´a
        
        # Ghi file n·∫øu c√≥ thay ƒë·ªïi
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t: {file_path}")
            return True
        else:
            print(f"‚è≠Ô∏è  Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t {file_path}: {e}")
        return False

def cleanup_imports():
    """D·ªçn d·∫πp imports trong to√†n b·ªô repo"""
    
    print("üîß B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t imports...")
    
    # C√°c file c·∫ßn c·∫≠p nh·∫≠t imports
    files_to_update = [
        "ultralytics/nn/tasks.py",
        "ultralytics/nn/modules/__init__.py", 
        "ultralytics/cfg/__init__.py",
        "ultralytics/__init__.py"
    ]
    
    updated_count = 0
    
    for file_path in files_to_update:
        if os.path.exists(file_path):
            if update_imports_in_file(file_path):
                updated_count += 1
        else:
            print(f"‚ö†Ô∏è  File kh√¥ng t·ªìn t·∫°i: {file_path}")
    
    print(f"\n‚úÖ Ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t {updated_count} file(s)")
    print("\nüìã C√°c thay ƒë·ªïi ch√≠nh:")
    print("   - Lo·∫°i b·ªè imports cho segmentation, pose, obb, classification")
    print("   - Lo·∫°i b·ªè c√°c class model kh√¥ng c·∫ßn thi·∫øt")
    print("   - C·∫≠p nh·∫≠t task definitions")
    
    print("\n‚ö†Ô∏è  L∆∞u √Ω: H√£y ki·ªÉm tra l·∫°i code ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ l·ªói import!")

if __name__ == "__main__":
    cleanup_imports()
